#include "includes_and_constants.h"

void print_image(const float image[][IMAGE_SIZE]) {
    for (int i = 0; i < IMAGE_SIZE; i++) {
        for (int j = 0; j < IMAGE_SIZE; j++) {
            cout << image[i][j] << " ";
        };
        cout << endl;
    };
}

int main() {
    const float fc_weight[NUM_CLASSES][IMAGE_NUMEL] = {0.044,-1.658,-0.242,-0.237,-0.192,-0.932,-2.642,-0.683,-0.504,-0.421,0.431,-0.336,0.082,1.316,-0.662,-0.934,-0.105,1.249,-0.152,-0.233,-0.824,1.033,2.026,-0.651,-0.256,1.267,0.941,-1.157,-3.565,0.219,0.850,-0.281,0.119,1.668,0.937,-1.481,-3.332,0.161,0.532,-0.087,-0.556,0.780,0.779,-0.235,-0.109,0.077,0.591,-0.597,-0.937,-0.290,0.493,-0.013,0.090,0.328,-0.541,-1.918,-0.207,-1.941,1.021,0.205,-0.226,0.102,-1.447,-1.297, 0.117,-0.085,0.108,-0.752,-0.256,-0.054,0.750,-2.816,-2.303,-2.081,-0.834,-0.117,-0.043,-0.363,-0.443,-2.391,1.647,-0.573,-0.757,1.245,1.806,-0.160,-1.009,-2.245,1.331,-0.081,0.882,0.955,1.287,-0.112,-0.987,-0.591,-0.021,-0.508,-0.061,0.250,1.055,-0.087,-0.733,-0.079,-0.779,-0.552,-0.731,0.327,1.185,-0.736,-1.615,-2.419,-1.470,-0.888,-0.641,0.360,1.013,-0.512,-0.706,0.340,-1.371,-3.513,-0.062,-0.360,0.936,1.141,0.289,0.530, 0.102,-0.254,0.231,-0.169,0.785,-0.280,0.013,-1.689,-1.538,1.324,-0.052,0.229,0.766,0.209,-0.122,-2.214,-0.213,0.253,0.002,-0.206,0.314,1.143,-0.288,-0.287,-1.169,-0.236,-2.383,-1.728,0.113,-0.497,-0.443,-0.239,-0.050,-0.494,-1.803,-0.909,0.319,-1.714,-3.650,0.011,-0.412,-0.358,0.793,1.651,-0.278,-1.925,-0.335,-1.627,1.273,0.220,0.574,0.528,0.821,1.482,1.831,0.579,1.250,0.740,-0.361,0.252,0.197,1.425,1.028,1.046, 0.002,0.449,0.114,0.198,0.372,0.828,0.916,-2.730,-0.019,1.522,0.600,0.128,0.073,0.543,0.407,-1.618,-0.084,-0.109,-1.256,-1.104,0.661,-0.216,-1.065,-0.646,-0.537,-1.390,-1.745,-0.250,0.186,-0.149,-1.596,-0.245,0.053,-1.531,-1.450,1.010,1.622,0.485,0.354,-0.002,-0.210,-0.289,-0.940,-2.569,-0.335,0.681,0.949,-1.708,-1.679,-0.382,0.438,0.118,0.550,0.205,0.289,-0.644,-1.533,1.211,0.343,0.246,0.210,0.404,0.107,-0.920, 0.043,-1.703,-1.555,0.187,0.555,-1.780,-2.898,-1.354,-0.261,-0.714,-1.193,0.152,0.346,-1.372,-0.510,-0.342,-2.203,0.816,1.438,1.119,-0.367,-0.444,0.175,1.493,-0.272,1.431,0.624,0.452,-0.705,0.403,0.735,1.622,-0.030,1.358,0.747,-0.134,0.799,0.938,1.526,0.085,1.209,0.765,1.180,1.717,1.576,0.284,0.765,-1.254,0.776,1.877,-2.046,-0.768,0.414,-1.623,-2.209,-1.057,-0.513,-1.116,-2.076,-0.435,-0.691,-2.028,-2.907,-0.640, -0.028,0.770,1.385,0.443,-0.967,0.614,1.952,-1.130,-0.965,-0.159,0.663,0.260,0.137,0.651,0.051,0.391,-1.620,-0.526,1.194,0.381,-1.281,-2.753,-1.493,-2.646,-0.894,1.421,0.959,0.740,0.376,-0.855,-0.660,-0.455,0.047,1.027,0.347,-0.947,-1.396,0.857,-0.043,-0.108,-0.305,-1.325,-2.869,-2.039,0.027,0.573,-0.311,-1.726,-1.036,0.139,0.729,0.488,-0.035,0.497,-0.504,-2.400,-0.972,0.729,1.724,0.502,0.373,-0.901,-1.254,-2.548, 0.050,-2.537,-1.344,0.268,-0.578,-0.304,-0.633,-0.627,-0.723,-2.933,0.165,-0.040,-0.814,-1.168,-0.254,-0.837,-1.195,0.310,0.440,0.376,-1.523,-2.029,-1.057,-0.698,-1.283,0.824,0.550,0.021,-0.587,-1.646,-0.555,-0.495,-0.083,0.736,1.025,1.083,-0.201,-0.373,0.806,0.072,-1.618,1.232,1.276,0.569,-0.361,1.099,-0.288,1.939,-1.027,-0.379,1.216,0.484,-0.117,0.839,0.398,-0.143,-0.256,-2.558,-0.477,0.249,0.128,0.807,0.706,-1.932, -0.088,-0.311,0.821,0.617,0.258,0.883,0.901,1.468,-0.359,0.023,0.551,0.197,0.163,0.554,-0.312,0.915,-0.326,-1.241,-1.039,-1.042,-0.419,0.720,0.278,0.782,-1.004,-1.540,0.055,-0.643,0.539,0.985,0.653,-1.795,0.042,-0.266,0.215,-0.254,0.661,1.061,2.331,-0.055,-0.345,0.099,0.023,0.627,0.616,0.486,0.978,-0.750,-0.718,-1.805,-0.804,0.717,-1.390,-2.068,-3.373,-0.995,-0.609,-0.587,0.264,0.725,-1.668,-2.742,-2.051,-0.730, -0.060,-0.652,0.202,0.034,-0.319,0.182,-1.133,-2.624,2.185,0.129,0.235,-0.485,-0.626,0.068,0.555,-2.269,1.397,0.198,0.479,0.229,-0.219,1.290,1.261,-1.947,-2.000,-0.588,0.387,0.296,0.194,0.607,-1.009,-0.358,-0.065,-1.151,0.692,0.503,-0.010,-0.807,-2.225,-0.058,-0.613,-0.153,1.402,0.627,0.382,0.189,-0.247,-1.964,-1.595,-0.480,0.575,-0.537,-0.736,0.401,0.838,-1.305,-1.369,0.432,-0.441,0.167,0.213,0.045,-0.052,0.056, 0.007,-0.107,0.326,0.305,0.309,-0.510,-0.658,0.647,-2.015,0.604,0.121,0.210,0.284,1.074,0.368,0.291,-0.794,-0.025,1.069,-0.621,0.675,1.229,0.876,-1.533,-0.568,0.347,1.292,1.384,0.811,0.782,1.147,-0.993,0.094,-1.445,-0.119,0.274,-0.925,0.151,0.375,-0.092,-0.153,-1.332,-1.749,-1.862,-1.500,0.246,-0.529,0.470,-0.923,1.319,-0.479,-1.068,-0.536,-0.090,-1.008,-0.092,-0.902,-1.421,0.839,-0.658,-0.246,-0.183,0.200,-0.694};
    float image[IMAGE_SIZE][IMAGE_SIZE];
    for (int i = 0; i < IMAGE_SIZE; i++) {
        for (int j = 0; j < IMAGE_SIZE; j++) {
            cin >> image[i][j];
        }
    }
    cout << "\nOriginal image is:" << endl;
    print_image(image);

    float flipped_image[IMAGE_SIZE][IMAGE_SIZE];
    vertical_flip(image, flipped_image);
    cout << "\nAfter vertical flip: (example)" << endl;
    print_image(flipped_image);


    horizontal_flip(image, flipped_image);
    cout << "\nAfter horizontal flip: (TODO1)" << endl;
    print_image(flipped_image);


    float rotated_image[IMAGE_SIZE][IMAGE_SIZE];
    rotate(image, rotated_image);
    cout << "\nAfter rotation: (TODO2)" << endl;
    print_image(rotated_image);

    
    float flattened_image[IMAGE_NUMEL];
    flatten_image(image, flattened_image);
    cout << "\nFlattened array: (TODO3)" << endl;
    for (int i = 0; i < IMAGE_NUMEL; i++) cout << flattened_image[i] << " ";
    cout << endl;

    
    float fc_output[NUM_CLASSES];
    cout << "\nMatric calculation result: (TODO4)" << endl;
    matrix_multiply(flattened_image, IMAGE_NUMEL, fc_weight, NUM_CLASSES, fc_output);
    for (int i = 0; i < NUM_CLASSES; i++) cout << fixed << setprecision(2) << fc_output[i] << " ";
    cout << endl;

    int result = -1;
    result = argmax(fc_output, NUM_CLASSES);
    cout << "\nThe classification result is:" << endl;
    cout << result << endl;
    
    return 0;
}